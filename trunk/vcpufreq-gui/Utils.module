' Gambas module file


PUBLIC FUNCTION CPUCount() AS Integer
DIM CPUFreqPath AS String
DIM vCPUCount AS Integer
DIM element AS String
DIM n AS Integer

CPUFreqPath = Global.BasePath &/ "cpu0" &/ "cpufreq"

' Reset CPU counter:
vCPUCount = 0
FOR EACH element IN Dir(Global.BasePath, "cpu*")
   'Count CPUs:
   IF IsInteger(Val(Right$(element))) = TRUE THEN
      INC vCPUCount
   ENDIF
NEXT

RETURN vCPUCount

END


PUBLIC FUNCTION CheckMultiCPUs() AS Boolean
DIM CPUFreqPath AS String
DIM arrAffectedCPUs AS String[]
DIM vAffectedCPUs AS Integer

CPUFreqPath = Global.BasePath &/ "cpu0" &/ "cpufreq"

IF Global.vCPUCount > 1 THEN
   ' Get affected_cpus:
   arrAffectedCPUs = NEW String[]
   arrAffectedCPUs.Clear
   IF Exist(CPUFreqPath &/ "affected_cpus") THEN
      TRY arrAffectedCPUs = Split(Utils.FileReadLine(CPUFreqPath &/ "affected_cpus"), " ", "")
      IF ERROR THEN
         Global.vCPUMulti = FALSE     'Assume no need for separate handling.
         ERROR_exit(0, TRUE, "", CPUFreqPath &/ "affected_cpus")
      ENDIF
      'Count AffectedCPUs:
      IF Global.vCPUCount = arrAffectedCPUs.Count THEN 
         RETURN FALSE     'No need for separate handling.
      ELSE 
         RETURN TRUE     'CPUs need separate handling. NOTE: might be CPU sets?
      ENDIF 
   ENDIF
ENDIF
END


PUBLIC FUNCTION AutoUnitsFreq(clockfreq AS Integer) AS String
' Return drive/partition size in pretty format as "value;unit" string:
DIM Temp AS Integer

' TODO: complete this with KHz, Hz, etc.
IF clockfreq < 1000000 THEN ' MegaHertz:
   RETURN Format$(clockfreq / 1000, "###,###,###") & " MHz"
ELSE ' GigaHertz:
   RETURN Format$(clockfreq / 1000000, "####,###,###.000") & " GHz"
END IF
END


PUBLIC FUNCTION AutoUnitsFreqRev(clockfreqPretty AS String) AS Integer
'Convert pretty format back to drive/partition size

' TODO: complete this with KHz, Hz, etc.
IF InStr(clockfreqPretty, "GHz") > 0 THEN
   RETURN Val(clockfreqPretty) * 1000000
ELSE IF InStr(clockfreqPretty, "MHz") > 0 THEN
   RETURN Val(clockfreqPretty) * 1000
ENDIF
END


PUBLIC FUNCTION FileEchoLine(filename AS String, sLine AS String) AS Boolean
DIM sTemp AS String

sTemp = "echo " & sLine & " > " & filename
SHELL sTemp WAIT

RETURN TRUE

CATCH
   RETURN FALSE
END


PUBLIC FUNCTION FileReadLine(filename AS String) AS String
DIM hFile AS File
DIM sLine AS String

OPEN filename FOR READ AS #hFile
LINE INPUT #hFile, sLine
CLOSE #hFile
RETURN sLine

CATCH
   RETURN ""
END


PUBLIC FUNCTION ReadIni(IniKey AS String, vDEFAULT AS Variant) AS Variant
' Read from ini file primitive:
DIM hSettings AS Settings
DIM aVariant AS Variant

hSettings = NEW Settings(Global.INIFIle)
aVariant = hSettings[IniKey, vDEFAULT]
'aVariant = hSettings [ IniKey ]
RETURN aVariant
END


PUBLIC SUB WriteIni(IniKey AS String, aVariant AS Variant)
' Write to ini file primitive:
DIM hSettings AS Settings

hSettings = NEW Settings(Global.INIFIle)
hSettings[IniKey] = aVariant
END


PUBLIC SUB WriteConfig()
' Write config to ini file:

WriteIni("Setting.ScalingGov", FMain.cmbScalingGovernor.Text)
WriteIni("Setting.CPUFreq", Utils.AutoUnitsFreqRev(FMain.cmbScalingSetSpeed.Text))
WriteIni("Setting.CPUFreqMaxLimit", Utils.AutoUnitsFreqRev(FMain.cmbScalingMaxFreq.Text))
WriteIni("Setting.CPUFreqMinLimit", Utils.AutoUnitsFreqRev(FMain.cmbScalingMinFreq.Text))
WriteIni("Setting.AutoRefreshRate", FMain.cmbAutoRefresh.Text)
IF FMain.cmbLoadOnBoot.index = 0 THEN
   WriteIni("Setting.LoadOnStart", TRUE)
ELSE
   WriteIni("Setting.LoadOnStart", FALSE)
ENDIF
END


PUBLIC SUB ReadConfig()
' Read config from ini file:

Global.vScalingGov = ReadIni("Setting.ScalingGov", "userspace")
Global.vCPUFreq = ReadIni("Setting.CPUFreq", 0)
Global.vCPUFreqMaxLimit = ReadIni("Setting.CPUFreqMaxLimit", 0)
Global.vCPUFreqMinLimit = ReadIni("Setting.CPUFreqMinLimit", 0)
Global.vAutoRefreshRate = ReadIni("Setting.AutoRefreshRate", "manual")
Global.vSaveOnExit = ReadIni("Setting.SaveOnExit", 0)
Global.vLoadOnStart = ReadIni("Setting.LoadOnStart", 0)
END


PUBLIC FUNCTION setScalingGovernor(gov AS String) AS String
DIM n AS Integer
DIM CPUFreqPath AS String
DIM retBool AS Boolean
DIM retGov AS String

FOR n = 0 TO Global.vCPUCount - 1
   CPUFreqPath = Global.BasePath &/ "cpu" & n &/ "cpufreq"
   IF Global.root = TRUE THEN retBool = Utils.FileEchoLine(CPUFreqPath &/ "scaling_governor", gov)
   ' Get scaling_governor:
   IF n = 0 THEN retGov = Utils.FileReadLine(CPUFreqPath &/ "scaling_governor")
   IF Global.vCPUMulti = FALSE THEN BREAK
NEXT 'n
RETURN retGov
END


PUBLIC SUB setScalingSetSpeed(freq AS String)
DIM n AS Integer
DIM CPUFreqPath AS String
DIM retBool AS Boolean
DIM setSpeed AS Integer

FOR n = 0 TO Global.vCPUCount - 1
   CPUFreqPath = Global.BasePath &/ "cpu" & n &/ "cpufreq"
   setSpeed = freq
   IF Global.root = TRUE THEN retBool = Utils.FileEchoLine(CPUFreqPath &/ "scaling_setspeed", setSpeed)
   Utils.CPUFreq_Refresh
   IF Global.vCPUMulti = FALSE THEN BREAK
NEXT 'n
END


PUBLIC FUNCTION setScalingMaxFreq(freq AS String) AS String
DIM n AS Integer
DIM CPUFreqPath AS String
DIM setSpeed AS Integer
DIM retBool AS Boolean

FOR n = 0 TO Global.vCPUCount - 1
   CPUFreqPath = Global.BasePath &/ "cpu" & n &/ "cpufreq"
   setSpeed = freq
   IF Global.root = TRUE THEN retBool = Utils.FileEchoLine(CPUFreqPath &/ "scaling_max_freq", setSpeed)
   IF Global.vCPUMulti = FALSE THEN BREAK
NEXT 'n
' Refresh scaling_max_freq:
Global.vCPUFreqMaxLimit = Utils.FileReadLine(CPUFreqPath &/ "scaling_max_freq")
RETURN AutoUnitsFreq(Global.vCPUFreqMaxLimit)
END


PUBLIC FUNCTION setScalingMinFreq(freq AS String) AS String
DIM n AS Integer
DIM CPUFreqPath AS String
DIM setSpeed AS Integer
DIM retBool AS Boolean

FOR n = 0 TO Global.vCPUCount - 1
   CPUFreqPath = Global.BasePath &/ "cpu" & n &/ "cpufreq"
   setSpeed = freq
   IF Global.root = TRUE THEN retBool = Utils.FileEchoLine(CPUFreqPath &/ "scaling_min_freq", setSpeed)
   IF Global.vCPUMulti = FALSE THEN BREAK
NEXT 'n

' Refresh scaling_min_freq:
Global.vCPUFreqMinLimit = Utils.FileReadLine(CPUFreqPath &/ "scaling_min_freq")
RETURN AutoUnitsFreq(Global.vCPUFreqMinLimit)
END


PUBLIC SUB GetConfig(whichCPU AS String)
' Get config from hardware:
DIM n AS Integer
DIM strtemp AS String
DIM CPUFreqPath AS String

' Check if cpufreq enabled for this CPU:
CPUFreqPath = Global.BasePath &/ whichCPU &/ "cpufreq"
IF IsDir(CPUFreqPath) THEN
   ' Get scaling_driver:
   TRY Global.vScalingDriver = Utils.FileReadLine(CPUFreqPath &/ "scaling_driver")
   IF ERROR THEN ERROR_exit(0, TRUE, "", CPUFreqPath &/ "scaling_driver")
   ' Get scaling_governor:
   TRY Global.vScalingGov = Utils.FileReadLine(CPUFreqPath &/ "scaling_governor")
   IF ERROR THEN ERROR_exit(0, TRUE, "", CPUFreqPath &/ "scaling_governor")
   ' Get scaling_cur_freq:
   TRY Global.vCPUFreq = Utils.FileReadLine(CPUFreqPath &/ "scaling_cur_freq")
   IF ERROR THEN ERROR_exit(0, TRUE, "", CPUFreqPath &/ "scaling_cur_freq")
   ' Get cpuinfo_max_freq:
   TRY Global.vCPUFreqMax = Utils.FileReadLine(CPUFreqPath &/ "cpuinfo_max_freq")
   IF ERROR THEN ERROR_exit(0, TRUE, "", CPUFreqPath &/ "cpuinfo_max_freq")
   ' Get cpuinfo_min_freq:
   TRY Global.vCPUFreqMin = Utils.FileReadLine(CPUFreqPath &/ "cpuinfo_min_freq")
   IF ERROR THEN ERROR_exit(0, TRUE, "", CPUFreqPath &/ "cpuinfo_min_freq")
   ' Get scaling_max_freq:
   TRY Global.vCPUFreqMaxLimit = Utils.FileReadLine(CPUFreqPath &/ "scaling_max_freq")
   IF ERROR THEN ERROR_exit(0, TRUE, "", CPUFreqPath &/ "scaling_max_freq")
   ' Get scaling_min_freq:
   TRY Global.vCPUFreqMinLimit = Utils.FileReadLine(CPUFreqPath &/ "scaling_min_freq")
   IF ERROR THEN ERROR_exit(0, TRUE, "", CPUFreqPath &/ "scaling_min_freq")
   ' Get scaling_available_frequencies
   Global.AvailableFreqs.Clear
   IF Exist(CPUFreqPath &/ "scaling_available_frequencies") THEN
      TRY Global.AvailableFreqs = Split(Utils.FileReadLine(CPUFreqPath &/ "scaling_available_frequencies"), " ", "")
      IF ERROR THEN ERROR_exit(0, TRUE, "", CPUFreqPath &/ "scaling_available_frequencies")
   ELSE
      Global.AvailableFreqs.Add(Global.vCPUFreqMin)
      Global.AvailableFreqs.Add(Global.vCPUFreqMax)
   ENDIF

   ' START: Need to clean up empty positions due to gambas1 split()...
   FOR n = 0 TO Global.AvailableFreqs.Max
      IF Global.AvailableFreqs[n] = "" THEN
         Global.AvailableFreqs.Remove(n)
      ELSE
         IF IsInteger(Val(Global.AvailableFreqs[n])) THEN
         ELSE
            strtemp = "Unexpected contents found in:"
            strtemp = strtemp & gb.NewLine
            strtemp = strtemp & CPUFreqPath &/ "scaling_available_frequencies"
            strtemp = strtemp & gb.NewLine
            strtemp = strtemp & "If possible post the contents of this file when reporting the error."
            ERROR_exit(255, TRUE, strtemp)
         ENDIF
      ENDIF
   NEXT
   ' END: Need to clean up empty positions due to gambas1 split()...

   Global.AvailableFreqs.Reverse
ELSE
   ' No scaling_driver:
   Global.vScalingDriver = "UNAVAILABLE"
ENDIF
END


PUBLIC SUB ERROR_exit(errtype AS Byte, err_crit AS Boolean, errmesg AS String, OPTIONAL filename AS String)

SELECT CASE errtype
CASE 0   'File read error
   IF err_crit THEN
      Message.Error("Error reading: " & filename & gb.NewLine & "Nothing else to do here, so I'll just exit...")
   ELSE
      Message.Error("Error reading: " & filename & gb.NewLine)
   ENDIF
CASE 255 'Misc. error, supply own message
   IF err_crit THEN
      Message.Error(errmesg & " " & filename & gb.NewLine & gb.NewLine & "Nothing else to do here, so I'll just exit...")
   ELSE
      Message.Error(errmesg)
   ENDIF
END SELECT

IF err_crit THEN
   FMain.butExit_Click
   QUIT
ENDIF

END


PUBLIC SUB CPUFreq_Refresh()
DIM n AS Integer
DIM CPUFreqPath AS String

Global.txtScalingSetSpeed.Clear
FOR n = 0 TO Global.vCPUCount - 1
   CPUFreqPath = Global.BasePath &/ "cpu" & n &/ "cpufreq"
   ' refresh scaling_cur_freq:
   Global.vCPUFreq = Utils.FileReadLine(CPUFreqPath &/ "scaling_cur_freq")
   Global.txtScalingSetSpeed.Add(Utils.AutoUnitsFreq(Global.vCPUFreq))
   FMain.GridView1[n + 1, 0].Alignment = Align.Right
   FMain.GridView1[n + 1, 0].Text = n
   FMain.GridView1[n + 1, 1].Alignment = Align.Right
   FMain.GridView1[n + 1, 1].Text = Global.txtScalingSetSpeed[n]
   'IF Global.vCPUMulti = FALSE THEN BREAK
NEXT 'n

END


